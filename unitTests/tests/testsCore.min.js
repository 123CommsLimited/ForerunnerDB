(function(){var e=function(d,b){test("Core - Init DB",function(){b.dbUp();ok(db instanceof d,"Complete");b.dbDown()});test("Core - DB.collection() :: Create Collection",function(){b.dbUp();user=db.collection("user");organisation=db.collection("organisation");ok(user instanceof d.classes.Collection,"Complete");b.dbDown()});test("Core - Collection.setData() :: Single Document Object",function(){b.dbUp();user.setData(singleUserObject);ok(user.find({_id:"1"})[0],"Complete");ok("Sam"===user.find({_id:"1"})[0].name,
"Complete");b.dbDown()});test("Core - Collection.remove() :: Remove Single Document via Find",function(){b.dbUp();user.setData(singleUserObject);ok(user.find({_id:"1"})[0],"Complete");var a=user.remove({_id:"1"});ok(!user.find({moo:!0})[0],"Complete");ok(1===a.length,"Complete");b.dbDown()});test("Core - Collection.setData() :: Multiple Documents via Array",function(){b.dbUp();b.dataUp();count=user.count();ok(count===usersData.length,"Complete");ok(user.find({_id:"2"})[0],"Complete");ok("Jim"===user.find({_id:"2"})[0].name,
"Complete");b.dbDown()});test("Core - Collection.remove() :: Remove Multiple Documents via Find Boolean",function(){b.dbUp();b.dataUp();var a=user.remove({lookup:!0});ok(!user.find({_id:"2"})[0],"Complete");ok(!user.find({_id:"4"})[0],"Complete");ok(2===a.length,"Complete");b.dbDown()});test("Core - Collection.insert() :: Check Primary Key Violation is Working",function(){b.dbUp();b.dataUp();user.remove({lookup:!0});var a=user.insert(usersData);ok(2===a.inserted.length,"Complete");ok(1===a.failed.length,
"Complete");b.dbDown()});test("Core - Collection.setData() :: Multiple Records Re-Insert Data",function(){b.dbUp();b.dataUp();user.setData(usersData);count=user.count();ok(count===usersData.length,"Complete");ok(user.find({_id:"2"})[0],"Complete");ok("Jim"===user.find({_id:"2"})[0].name,"Complete");b.dbDown()});test("Core - Collection.find() :: $exists clause true on field that does exist",function(){b.dbUp();b.dataUp();var a=user.find({name:{$exists:!0}});ok(3===a.length,"Complete");b.dbDown()});
test("Core - Collection.find() :: $exists clause true on field that does not exist",function(){b.dbUp();b.dataUp();var a=user.find({doesNotExist:{$exists:!0}});ok(0===a.length,"Complete");b.dbDown()});test("Core - Collection.find() :: $exists clause true on field that does exist",function(){b.dbUp();b.dataUp();user._debug=!1;var a=user.find({onlyOne:{$exists:!0}});user._debug=!1;ok(1===a.length,"Complete");b.dbDown()});test("Core - Collection.find() :: $exists clause false",function(){b.dbUp();b.dataUp();
user._debug=!1;var a=user.find({doesNotExist:{$exists:!1}});user._debug=!1;ok(3===a.length,"Complete");b.dbDown()});test("Core - Collection.find() :: $gt clause",function(){b.dbUp();b.dataUp();var a=user.find({age:{$gt:11}});ok(2===a.length,"Complete");b.dbDown()});test("Core - Collection.find() :: $gte clause",function(){b.dbUp();b.dataUp();var a=user.find({age:{$gte:12}});ok(2===a.length,"Complete");b.dbDown()});test("Core - Collection.find() :: $lt clause",function(){b.dbUp();b.dataUp();var a=
user.find({age:{$lt:12}});ok(1===a.length,"Complete");b.dbDown()});test("Core - Collection.find() :: $lte clause",function(){b.dbUp();b.dataUp();var a=user.find({age:{$lte:12}});ok(2===a.length,"Complete");b.dbDown()});test("Core - Collection.find() :: $gt $lt clause combined",function(){b.dbUp();b.dataUp();var a=user.find({age:{$lt:13,$gt:5}});ok(1===a.length,"Complete");b.dbDown()});test("Core - Collection.find() :: $gte $lte clause combined",function(){b.dbUp();b.dataUp();var a=user.find({age:{$lte:13,
$gte:5}});ok(2===a.length,"Complete");b.dbDown()});test("Core - Collection.find() :: $or clause",function(){b.dbUp();b.dataUp();var a=user.find({$or:[{age:15},{name:"Dean"}]});ok(2===a.length,"Complete");b.dbDown()});test("Core - Collection.find() :: $and clause",function(){b.dbUp();b.dataUp();var a=user.find({$and:[{age:15},{name:"Jim"}]});ok(1===a.length,"Complete");b.dbDown()});test("Core - Collection.find() :: Nested $or clause",function(){b.dbUp();b.dataUp();var a=user.find({log:{$or:[{val:1},
{val:2}]}});ok(2===a.length,"Complete");b.dbDown()});test("Core - Collection.update() :: arrayKey.$ Positional array selector",function(){b.dbUp();b.dataUp();var a=user.find({arr:{_id:"lsd"}});ok(1===a.length,"Failed in finding document to update!");for(var d,c=0;c<a[0].arr.length;c++)"lsd"===a[0].arr[c]._id&&(d=a[0].arr[c].val);ok(1===d,"Failed in finding document to update!");c=user.update({arr:{_id:"lsd"}},{"arr.$":{val:2}});ok(1===c.length,"Failed to update document with positional data!");for(var a=
user.find({arr:{_id:"lsd"}}),e,c=0;c<a[0].arr.length;c++)"lsd"===a[0].arr[c]._id&&(e=a[0].arr[c].val);ok(2===e,"Failed in finding document to update!");b.dbDown()});test("Core - Collection.find() :: Options :: Single join",function(){b.dbUp();b.dataUp();var a=user.find({},{join:[{organisation:{_id:"orgId",$as:"org",$require:!0,$multi:!1}}]});ok(a[0].orgId===a[0].org._id,"Complete");ok(a[1].orgId===a[1].org._id,"Complete");ok(a[2].orgId===a[2].org._id,"Complete");b.dbDown()});test("Core - Collection.find() :: Options :: Single join, array of ids",
function(){b.dbUp();b.dataUp();var a=user.find({},{join:[{organisation:{_id:"orgId",$as:"org",$require:!0,$multi:!1}},{user:{_id:"friends",$as:"friendData",$require:!0,$multi:!0}}]});ok(a[0].orgId===a[0].org._id,"Complete");ok(a[1].orgId===a[1].org._id,"Complete");ok(a[2].orgId===a[2].org._id,"Complete");ok(a[0].friends[0]===a[0].friendData[0]._id,"Complete");ok(a[1].friends[0]===a[1].friendData[0]._id,"Complete");ok(a[2].friends[0]===a[2].friendData[0]._id,"Complete");b.dbDown()});test("Core - Collection.find() :: Options :: Multi join",
function(){b.dbUp();b.dataUp();var a=user.find({},{join:[{user:{_id:"friends",$as:"friendData",$require:!0,$multi:!0}}]});ok(a[0].friends[0]===a[0].friendData[0]._id,"Complete");ok(a[1].friends[0]===a[1].friendData[0]._id,"Complete");ok(a[2].friends[0]===a[2].friendData[0]._id,"Complete");b.dbDown()});test("Core - Collection.updateById() :: $push array operator",function(){b.dbUp();b.dataUp();var a=user.findById("2");ok(2===a.arr.length,"Complete");user.updateById("2",{$push:{arr:{_id:"ahh",val:8}}});
a=user.findById("2");ok(3===a.arr.length,"Complete");b.dbDown()});test("Core - Collection.updateById() :: $pull array operator",function(){b.dbUp();b.dataUp();var a=user.findById("2");ok(3===a.arr.length,"Complete");user.updateById("2",{$pull:{arr:{_id:"ahh"}}});a=user.findById("2");ok(2===a.arr.length,"Complete");b.dbDown()});test("Core - Collection.upsert() :: Insert on upsert call",function(){b.dbUp();b.dataUp();var a=user.findById("1");ok(!a,"Complete");a=user.upsert(singleUserObject);ok("insert"===
a.op,"Complete");a=user.findById("1");ok(a,"Complete");b.dbDown()});test("Core - Collection.upsert() :: Update on upsert call",function(){b.dbUp();b.dataUp();user.upsert(singleUserObject);var a=user.findById("1");ok(a,"Complete");a=JSON.parse(JSON.stringify(singleUserObject));a.updated=!0;a=user.upsert(a);ok("update"===a.op,"Complete");a=user.findById("1");ok(!0===a.updated,"Complete");b.dbDown()});test("Core - Collection.find() :: Options :: Single Sort Argument, Ascending",function(){b.dbUp();b.dataUp();
var a=user.find({},{sort:{name:1}});ok("Dean"===a[0].name,"Complete");ok("Jim"===a[1].name,"Complete");ok("Kat"===a[2].name,"Complete");b.dbDown()});test("Core - Collection.find() :: Options :: Single Sort Argument, Descending",function(){b.dbUp();b.dataUp();var a=user.find({},{sort:{name:-1}});ok("Kat"===a[0].name,"Complete");ok("Jim"===a[1].name,"Complete");ok("Dean"===a[2].name,"Complete");b.dbDown()});test("Core - Collection.find() :: Options :: Multi Sort Arguments (2 arguments), Ascending, Ascending",
function(){b.dbUp();b.dataUp();var a=organisation.find({$or:[{industry:"construction"},{industry:"it"}]},{sort:{industry:1,profit:1}});ok("construction"===a[0].industry&&27===a[0].profit,"Complete");ok("construction"===a[1].industry&&45===a[1].profit,"Complete");ok("construction"===a[2].industry&&340===a[2].profit,"Complete");ok("construction"===a[3].industry&&664===a[3].profit,"Complete");ok("construction"===a[4].industry&&980===a[4].profit,"Complete");ok("it"===a[5].industry&&135===a[5].profit,
"Complete");ok("it"===a[6].industry&&135===a[6].profit,"Complete");ok("it"===a[7].industry&&135===a[7].profit,"Complete");ok("it"===a[8].industry&&200===a[8].profit,"Complete");ok("it"===a[9].industry&&780===a[9].profit,"Complete");ok("it"===a[10].industry&&1002===a[10].profit,"Complete");ok("it"===a[11].industry&&1002===a[11].profit,"Complete");ok("it"===a[12].industry&&1002===a[12].profit,"Complete");b.dbDown()});test("Core - Collection.find() :: Options :: Multi Sort Arguments (3 arguments), Ascending, Ascending, Ascending",
function(){b.dbUp();b.dataUp();var a=organisation.find({$or:[{industry:"construction"},{industry:"it"}]},{sort:{industry:1,profit:1,type:1}});ok("construction"===a[0].industry&&27===a[0].profit,"Profit");ok("construction"===a[1].industry&&45===a[1].profit,"Profit");ok("construction"===a[2].industry&&340===a[2].profit,"Profit");ok("construction"===a[3].industry&&664===a[3].profit,"Profit");ok("construction"===a[4].industry&&980===a[4].profit,"Profit");ok("it"===a[5].industry&&135===a[5].profit&&"beta"===
a[5].type,"Profit and Type");ok("it"===a[6].industry&&135===a[6].profit&&"cappa"===a[6].type,"Profit and Type");ok("it"===a[7].industry&&135===a[7].profit&&"delta"===a[7].type,"Profit and Type");ok("it"===a[8].industry&&200===a[8].profit&&"alpha"===a[8].type,"Profit and Type");ok("it"===a[9].industry&&780===a[9].profit&&"cappa"===a[9].type,"Profit and Type");ok("it"===a[10].industry&&1002===a[10].profit&&"alpha"===a[10].type,"Profit and Type");ok("it"===a[11].industry&&1002===a[11].profit&&"gamma"===
a[11].type,"Profit and Type");ok("it"===a[12].industry&&1002===a[12].profit&&"xray"===a[12].type,"Profit and Type");b.dbDown()});test("Core - Collection.find() :: Options :: Multi Sort Arguments (3 arguments), Ascending, Ascending, Descending",function(){b.dbUp();b.dataUp();var a=organisation.find({$or:[{industry:"construction"},{industry:"it"}]},{sort:{industry:1,profit:1,type:-1}});ok("construction"===a[0].industry&&27===a[0].profit,"Profit");ok("construction"===a[1].industry&&45===a[1].profit,
"Profit");ok("construction"===a[2].industry&&340===a[2].profit,"Profit");ok("construction"===a[3].industry&&664===a[3].profit,"Profit");ok("construction"===a[4].industry&&980===a[4].profit,"Profit");ok("it"===a[5].industry&&135===a[5].profit&&"delta"===a[5].type,"Profit and Type");ok("it"===a[6].industry&&135===a[6].profit&&"cappa"===a[6].type,"Profit and Type");ok("it"===a[7].industry&&135===a[7].profit&&"beta"===a[7].type,"Profit and Type");ok("it"===a[8].industry&&200===a[8].profit&&"alpha"===
a[8].type,"Profit and Type");ok("it"===a[9].industry&&780===a[9].profit&&"cappa"===a[9].type,"Profit and Type");ok("it"===a[10].industry&&1002===a[10].profit&&"xray"===a[10].type,"Profit and Type");ok("it"===a[11].industry&&1002===a[11].profit&&"gamma"===a[11].type,"Profit and Type");ok("it"===a[12].industry&&1002===a[12].profit&&"alpha"===a[12].type,"Profit and Type");b.dbDown()});test("Core - Collection.find() :: Options :: Multi Sort Arguments (2 arguments), Descending, Descending with Numbers and Booleans",
function(){b.dbUp();b.dataUp();var a=user.find({},{sort:{lookup:1,age:1}});ok("Kat"===a[0].name&&!1===a[0].lookup,"Name and Lookup");ok("Dean"===a[1].name&&!0===a[1].lookup,"Name and Lookup");ok("Jim"===a[2].name&&!0===a[2].lookup,"Name and Lookup");b.dbDown()});test("Core - CollectionGroup.find() :: Single collection",function(){b.dbUp();b.dataUp();var a=db.collectionGroup("testGroup").addCollection(user).find({},{sort:{age:1}});ok("Dean"===a[0].name&&5===a[0].age,"Name and Lookup");ok("Kat"===a[1].name&&
12===a[1].age,"Name and Lookup");ok("Jim"===a[2].name&&15===a[2].age,"Name and Lookup");b.dbDown()});test("Core - CollectionGroup.find() :: Single collection, descending sort",function(){b.dbUp();b.dataUp();var a=db.collectionGroup("testGroup").addCollection(user).find({},{sort:{age:-1}});ok("Jim"===a[0].name&&15===a[0].age,"Name and Lookup");ok("Kat"===a[1].name&&12===a[1].age,"Name and Lookup");ok("Dean"===a[2].name&&5===a[2].age,"Name and Lookup");b.dbDown()})};"function"===typeof define&&define.amd?
require(["../ForerunnerDB","./base"],function(d,b){e(d,b)}):e(ForerunnerDB,base)})();
