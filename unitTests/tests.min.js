var db,user,organisation,count,singleUserObject={_id:"1",name:"Sam",age:19,lookup:!0,arr:[{val:1},{val:3}],log:{val:6},orgId:"4"},usersData=[{_id:"2",name:"Jim",age:15,lookup:!0,onlyOne:!0,arr:[{_id:"anf",val:2},{_id:"eet",val:4}],log:{val:7},orgId:"1"},{_id:"3",name:"Kat",age:12,lookup:!1,arr:[{_id:"zke",val:1},{_id:"zjs",val:5}],log:{val:1},orgId:"2"},{_id:"4",name:"Dean",age:5,lookup:!0,arr:[{_id:"lsd",val:1},{_id:"lop",val:5}],log:{val:2},orgId:"3"}],organisationsData=[{_id:"1",name:"Organisation 1"},
{_id:"2",name:"Organisation 1"},{_id:"3",name:"Organisation 1"},{_id:"4",name:"Organisation 1"},{_id:"5",name:"Organisation 1"}];QUnit.config.reorder=!1;test("Init DB",function(){db=new ForerunnerDB;ok(db instanceof ForerunnerDB,"Failed!")});test("DB.collection() :: Create Collection",function(){user=db.collection("user");organisation=db.collection("organisation");ok(user instanceof ForerunnerDB.types.Collection,"Failed!")});
test("Collection.setData() :: Single Document Object",function(){user.setData(singleUserObject);ok(user.find({_id:"1"})[0],"Failed!");ok("Sam"===user.find({_id:"1"})[0].name,"Failed!")});test("Collection.remove() :: Remove Single Document via Find",function(){var a=user.remove({_id:"1"});ok(!user.find({moo:!0})[0],"Failed!");ok(1===a.length,"Failed!")});
test("Collection.setData() :: Multiple Documents via Array",function(){user.setData(usersData);organisation.setData(organisationsData);count=user.count();ok(count===usersData.length,"Failed!");ok(user.find({_id:"2"})[0],"Failed!");ok("Jim"===user.find({_id:"2"})[0].name,"Failed!")});test("Collection.remove() :: Remove Multiple Documents via Find Boolean",function(){var a=user.remove({lookup:!0});ok(!user.find({_id:"2"})[0],"Failed!");ok(!user.find({_id:"4"})[0],"Failed!");ok(2===a.length,"Failed!")});
test("Collection.insert() :: Check Primary Key Violation is Working",function(){var a=user.insert(usersData);ok(2===a.inserted.length,"Failed!");ok(1===a.failed.length,"Failed!")});test("Collection.setData() :: Multiple Records Re-Insert Data",function(){user.setData(usersData);count=user.count();ok(count===usersData.length,"Failed!");ok(user.find({_id:"2"})[0],"Failed!");ok("Jim"===user.find({_id:"2"})[0].name,"Failed!")});
test("Collection.find() :: $exists clause true on field that does exist",function(){var a=user.find({name:{$exists:!0}});ok(3===a.length,"Failed!")});test("Collection.find() :: $exists clause true on field that does not exist",function(){var a=user.find({doesNotExist:{$exists:!0}});ok(0===a.length,"Failed!")});test("Collection.find() :: $exists clause true on field that does exist",function(){user._debug=!1;var a=user.find({onlyOne:{$exists:!0}});user._debug=!1;ok(1===a.length,"Failed!")});
test("Collection.find() :: $exists clause false",function(){user._debug=!1;var a=user.find({doesNotExist:{$exists:!1}});user._debug=!1;ok(3===a.length,"Failed!")});test("Collection.find() :: $gt clause",function(){var a=user.find({age:{$gt:11}});ok(2===a.length,"Failed!")});test("Collection.find() :: $gte clause",function(){var a=user.find({age:{$gte:12}});ok(2===a.length,"Failed!")});test("Collection.find() :: $lt clause",function(){var a=user.find({age:{$lt:12}});ok(1===a.length,"Failed!")});
test("Collection.find() :: $lte clause",function(){var a=user.find({age:{$lte:12}});ok(2===a.length,"Failed!")});test("Collection.find() :: $gt $lt clause combined",function(){var a=user.find({age:{$lt:13,$gt:5}});ok(1===a.length,"Failed!")});test("Collection.find() :: $gte $lte clause combined",function(){var a=user.find({age:{$lte:13,$gte:5}});ok(2===a.length,"Failed!")});test("Collection.find() :: $or clause",function(){var a=user.find({$or:[{age:15},{name:"Dean"}]});ok(2===a.length,"Failed!")});
test("Collection.find() :: $and clause",function(){var a=user.find({$and:[{age:15},{name:"Jim"}]});ok(1===a.length,"Failed!")});test("Collection.find() :: Nested $or clause",function(){var a=user.find({log:{$or:[{val:1},{val:2}]}});ok(2===a.length,"Failed!")});
test("Collection.update() :: arrayKey.$ Positional array selector",function(){var a=user.find({arr:{_id:"lsd"}});ok(1===a.length,"Failed in finding document to update!");for(var c,b=0;b<a[0].arr.length;b++)"lsd"===a[0].arr[b]._id&&(c=a[0].arr[b].val);ok(1===c,"Failed in finding document to update!");b=user.update({arr:{_id:"lsd"}},{"arr.$":{val:2}});ok(1===b.length,"Failed to update document with positional data!");for(var a=user.find({arr:{_id:"lsd"}}),d,b=0;b<a[0].arr.length;b++)"lsd"===a[0].arr[b]._id&&
(d=a[0].arr[b].val);ok(2===d,"Failed in finding document to update!")});test("Collection.find() :: Options :: Single join",function(){var a=user.find({},{join:[{organisation:{_id:"orgId",$as:"org",$require:!0,$multi:!1}}]});ok(a[0].orgId===a[0].org._id,"Failed!");ok(a[1].orgId===a[1].org._id,"Failed!");ok(a[2].orgId===a[2].org._id,"Failed!")});
test("Collection.updateById() :: $push array operator",function(){var a=user.findById("2");ok(2===a.arr.length,"Failed!");user.updateById("2",{$push:{arr:{_id:"ahh",val:8}}});a=user.findById("2");ok(3===a.arr.length,"Failed!")});test("Collection.updateById() :: $pull array operator",function(){var a=user.findById("2");ok(3===a.arr.length,"Failed!");user.updateById("2",{$pull:{arr:{_id:"ahh"}}});a=user.findById("2");ok(2===a.arr.length,"Failed!")});
